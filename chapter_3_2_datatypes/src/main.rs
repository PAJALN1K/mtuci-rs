// –ü—Ä–∏–º–µ—Ä 1
//
// –° –ø–æ–º–æ—â—å—é .parse() –º—ã –º–æ–∂–µ–º –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å —Å—Ç—Ä–æ–∫—É –≤ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, u32
//
// fn main() {
//     let guess: u32 = "42".parse().expect("Not a number!");
//     println!("{}", guess)
// }


// –ü—Ä–∏–º–µ—Ä 2

// –í —Ü–µ–ª–æ–º, –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —á–∏—Å–ª–∞–º–∏ –Ω–∞ Rust –Ω–µ —Å–∏–ª—å–Ω–æ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –æ—Ç –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —è–∑—ã–∫–æ–≤. –û–¥–Ω–∞–∫–æ –≤—ã–∑—ã–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å –æ–ø–µ—Ä–∞—Ü–∏—è –¥–µ–ª–µ–Ω–∏—è.

// fn main() {
//     // addition
//     let sum = 5 + 10;
//
//     // subtraction
//     let difference = 95.5 - 4.3;
//
//     // multiplication
//     let product = 4 * 30;
//
//     // division
//     let quotient = 56.7 / 32.2;                  // –û–ø–µ—Ä–∞–Ω–¥ "/" —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ —á–∏—Å–ª–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –¥—Ä–æ–±–Ω–æ–º –≤–∏–¥–µ
//     let truncated = -5 / 3; // Results in -1     // –û–ø–µ—Ä–∞–Ω–¥ "/" —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ —á–∏—Å–ª–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ —Ü–µ–ª–æ–º –≤–∏–¥–µ
//
//     // remainder
//     let remainder = 43 % 5; // –î–µ–ª–µ–Ω–∏–µ —Å –æ—Å—Ç–∞—Ç–∫–æ–º
//
//     println!("sum is {}", sum);
//     println!("difference is {}", difference);
//     println!("product is {}", product);
//     println!("quotient is {}", quotient);
//     println!("truncated is {}", truncated);
//     println!("remainder is {}", remainder);
// }


// –ü—Ä–∏–º–µ—Ä 3

// –î—Ä–æ–±–Ω—ã–µ —á–∏—Å–ª–∞ - f64 –∏ f32. f64 –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π.

// fn main() {
//     let x = 2.0; // f64
//
//     let y: f32 = 3.0; // f32
// }


// –ü—Ä–∏–º–µ—Ä 4

// bool - –ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ç–∏–ø. –ó–∞–Ω–∏–º–∞–µ—Ç –æ–¥–∏–Ω –±–∞–π—Ç.

// fn main() {
//     let t = true;
//
//     let f: bool = false; // with explicit type annotation
// }


// –ü—Ä–∏–º–µ—Ä 5

// char - "—Å–∞–º—ã–π –ø—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–π –∞–ª—Ñ–∞–≤–∏—Ç–Ω—ã–π —Ç–∏–ø —è–∑—ã–∫–∞". –ü–∏—à–µ—Ç—Å—è —á–µ—Ä–µ–∑ –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏.

// fn main() {
//     let c = 'z';
//     let z: char = '‚Ñ§'; // with explicit type annotation
//     let heart_eyed_cat = 'üòª';
// }


// –ü—Ä–∏–º–µ—Ä 6

// –ö–æ—Ä—Ç–µ–∂ - —Å–ø–æ—Å–æ–± —Ö—Ä–∞–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ. –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö. –ï–≥–æ –¥–ª–∏–Ω–∞ –Ω–µ–∏–∑–º–µ–Ω–Ω–∞.

// fn main() {
//     let tup: (i32, f64, u8) = (500, 6.4, 1); // –ê–Ω–Ω–æ—Ç–∞—Ü–∏—è –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞
// }


// –ü—Ä–∏–º–µ—Ä 7

// –ü—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é –∫–æ—Ä—Ç–µ–∂–∞.

// fn main() {
//     let tup = (500, 6.4, 1);
//
//     let (x, y, z) = tup;
//
//     println!("The value of y is: {y}");
// }


// –ü—Ä–∏–º–µ—Ä 8

// –û–±—Ä–∞—â–µ–Ω–∏–µ –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º –∫–æ—Ä—Ç–µ–∂–∞

// fn main() {
//     let x: (i32, f64, u8) = (500, 6.4, 1);
//
//     let five_hundred = x.0;
//
//     let six_point_four = x.1;
//
//     let one = x.2;
// }


// –ü—Ä–∏–º–µ—Ä 9

// –ú–∞—Å—Å–∏–≤ - —Å–ø–æ—Å–æ–± —Ö—Ä–∞–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ. –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö. –ï–≥–æ –¥–ª–∏–Ω–∞ –Ω–µ–∏–∑–º–µ–Ω–Ω–∞.

// fn main() {
//     let a = [1, 2, 3, 4, 5];
// }


// –ü—Ä–∏–º–µ—Ä 10

// –ú–∞—Å—Å–∏–≤ –±—É–¥–µ—Ç –∏–¥–µ–∞–ª—å–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º –¥–ª—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –º–µ—Å—è—Ü–µ–≤ (–∏—Ö —á–∏—Å–ª–æ –Ω–µ–∏–∑–º–µ–Ω–Ω–æ).

// fn main() {
//     let months = ["January", "February", "March", "April", "May", "June", "July",
//               "August", "September", "October", "November", "December"];
// }


// –ü—Ä–∏–º–µ—Ä 11

// –ê–Ω–Ω–æ—Ç–∞—Ü–∏—è –º–∞—Å—Å–∏–≤–∞ –≤—ã–≥–ª—è–¥–∏—Ç —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:

// fn main() {
//     let a: [i32; 5] = [1, 2, 3, 4, 5];
// }


// –ü—Ä–∏–º–µ—Ä 12

// –í —ç—Ç–æ–º –ø—Ä–∏–º–µ—Ä–µ —Å–æ–∑–¥–∞—Å—Ç—Å—è –º–∞—Å—Å–∏–≤ a = [3, 3, 3, 3, 3]
// fn main() {
//     let a = [3; 5];
// }


// –ü—Ä–∏–º–µ—Ä 13

// –û–±—Ä–∞—â–µ–Ω–∏–µ –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º –º–∞—Å—Å–∏–≤–∞. –í —ç—Ç–æ–º –ø—Ä–∏–º–µ—Ä–µ first - 1, second - 2.

// fn main() {
//     let a = [1, 2, 3, 4, 5];
//
//     let first = a[0];
//     let second = a[1];
// }


// –ü—Ä–∏–º–µ—Ä 14

// –í —ç—Ç–æ–º –ø—Ä–∏–º–µ—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –≤–≤–µ—Å—Ç–∏ –∏–Ω–¥–µ–∫—Å —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤–∞, –∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –≤–µ—Ä–Ω–µ—Ç —ç–ª–µ–º–µ–Ω—Ç —Å —ç—Ç–∏–º –∏–Ω–¥–µ–∫—Å–æ–º.
// –í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –±—É–¥–µ—Ç –±–æ–ª—å—à–µ –¥–ª–∏–Ω—ã –º–∞—Å—Å–∏–≤–∞ –∏–ª–∏ —Ä–∞–≤–Ω–æ –µ–π, —Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –≤—ã–∑–æ–≤–µ—Ç –ü–∞–Ω–∏–∫—É.

// use std::io;
//
// fn main() {
//     let a = [1, 2, 3, 4, 5];
//
//     println!("Please enter an array index.");
//
//     let mut index = String::new();
//
//     io::stdin()
//         .read_line(&mut index)
//         .expect("Failed to read line");
//
//     let index: usize = index
//         .trim()
//         .parse()
//         .expect("Index entered was not a number");
//
//     let element = a[index];
//
//     println!("The value of the element at index {index} is: {element}");
// }
